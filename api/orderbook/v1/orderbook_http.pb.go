// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: orderbook/v1/orderbook.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderBookCancelOrder = "/orderbook.v1.OrderBook/CancelOrder"
const OperationOrderBookCreateOrder = "/orderbook.v1.OrderBook/CreateOrder"
const OperationOrderBookGetInstrumentQuote = "/orderbook.v1.OrderBook/GetInstrumentQuote"
const OperationOrderBookGetOrder = "/orderbook.v1.OrderBook/GetOrder"
const OperationOrderBookListOrders = "/orderbook.v1.OrderBook/ListOrders"

type OrderBookHTTPServer interface {
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	GetInstrumentQuote(context.Context, *GetInstrumentQuoteRequest) (*InstrumentQuote, error)
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
}

func RegisterOrderBookHTTPServer(s *http.Server, srv OrderBookHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/orders", _OrderBook_CreateOrder0_HTTP_Handler(srv))
	r.GET("/v1/orders/{order_id}", _OrderBook_GetOrder0_HTTP_Handler(srv))
	r.DELETE("/v1/orders/{order_id}", _OrderBook_CancelOrder0_HTTP_Handler(srv))
	r.GET("/v1/orders", _OrderBook_ListOrders0_HTTP_Handler(srv))
	r.GET("/v1/instruments/{instrument}/quote", _OrderBook_GetInstrumentQuote0_HTTP_Handler(srv))
}

func _OrderBook_CreateOrder0_HTTP_Handler(srv OrderBookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderBookCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Order)
		return ctx.Result(200, reply)
	}
}

func _OrderBook_GetOrder0_HTTP_Handler(srv OrderBookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderBookGetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Order)
		return ctx.Result(200, reply)
	}
}

func _OrderBook_CancelOrder0_HTTP_Handler(srv OrderBookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderBookCancelOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelOrder(ctx, req.(*CancelOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderBook_ListOrders0_HTTP_Handler(srv OrderBookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrdersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderBookListOrders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrders(ctx, req.(*ListOrdersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrdersResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderBook_GetInstrumentQuote0_HTTP_Handler(srv OrderBookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInstrumentQuoteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderBookGetInstrumentQuote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInstrumentQuote(ctx, req.(*GetInstrumentQuoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InstrumentQuote)
		return ctx.Result(200, reply)
	}
}

type OrderBookHTTPClient interface {
	CancelOrder(ctx context.Context, req *CancelOrderRequest, opts ...http.CallOption) (rsp *CancelOrderResponse, err error)
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *Order, err error)
	GetInstrumentQuote(ctx context.Context, req *GetInstrumentQuoteRequest, opts ...http.CallOption) (rsp *InstrumentQuote, err error)
	GetOrder(ctx context.Context, req *GetOrderRequest, opts ...http.CallOption) (rsp *Order, err error)
	ListOrders(ctx context.Context, req *ListOrdersRequest, opts ...http.CallOption) (rsp *ListOrdersResponse, err error)
}

type OrderBookHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderBookHTTPClient(client *http.Client) OrderBookHTTPClient {
	return &OrderBookHTTPClientImpl{client}
}

func (c *OrderBookHTTPClientImpl) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...http.CallOption) (*CancelOrderResponse, error) {
	var out CancelOrderResponse
	pattern := "/v1/orders/{order_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderBookCancelOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderBookHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*Order, error) {
	var out Order
	pattern := "/v1/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderBookCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderBookHTTPClientImpl) GetInstrumentQuote(ctx context.Context, in *GetInstrumentQuoteRequest, opts ...http.CallOption) (*InstrumentQuote, error) {
	var out InstrumentQuote
	pattern := "/v1/instruments/{instrument}/quote"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderBookGetInstrumentQuote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderBookHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...http.CallOption) (*Order, error) {
	var out Order
	pattern := "/v1/orders/{order_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderBookGetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderBookHTTPClientImpl) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...http.CallOption) (*ListOrdersResponse, error) {
	var out ListOrdersResponse
	pattern := "/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderBookListOrders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
